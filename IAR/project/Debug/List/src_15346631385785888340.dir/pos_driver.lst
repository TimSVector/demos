###############################################################################
#
# IAR ANSI C/C++ Compiler V9.60.2.399/W64 for ARM         24/Sep/2025  10:21:31
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\vector\customers\snph\IAR\code\main\pos_driver.c
#    Command line                 =
#        -f
#        D:\vector\customers\snph\IAR\Debug\Obj\src_15346631385785888340.dir\pos_driver.o.rsp
#        (D:\vector\customers\snph\IAR\code\main\pos_driver.c -lC
#        D:\vector\customers\snph\IAR\Debug\List\src_15346631385785888340.dir
#        -o D:\vector\customers\snph\IAR\Debug\Obj\src_15346631385785888340.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --libc++ -I
#        D:\vector\customers\snph\IAR\code\database\inc\ -I
#        D:\vector\customers\snph\IAR\code\encrypt\inc\ -I
#        D:\vector\customers\snph\IAR\code\order_entry\inc\ -I
#        D:\vector\customers\snph\IAR\code\utils\inc\ -On) --dependencies=n
#        D:\vector\customers\snph\IAR\Debug\Obj\src_15346631385785888340.dir\pos_driver.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        D:\vector\customers\snph\IAR\Debug\List\src_15346631385785888340.dir\pos_driver.lst
#    Object file                  =
#        D:\vector\customers\snph\IAR\Debug\Obj\src_15346631385785888340.dir\pos_driver.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  1
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#      __iar_require _Printf         
#
###############################################################################

D:\vector\customers\snph\IAR\code\main\pos_driver.c
      1          /**************************************************************************************
      2           * Unit: manager_driver.c                                                              *
      3           *                                                                                     *
      4           * Purpose: This is the main driver for the point of sales demo                        *
      5           *                                                                                     *
      6           * Public API:                                                                         *
      7           *      - main                                                                         *
      8           *                                                                                     *
      9           * Private API:                                                                        *
     10           *      - run_order_test                                                               *
     11           *                                                                                     *
     12           *                                                                                     *
     13           ***************************************************************************************/
     14                                                                                                
     15          /****************************************************************************************
     16           *                               System Header Files                                    *
     17           ****************************************************************************************/
     18          
     19          /**************************************************************************************
     20           *                               Program Header Files                                 *
     21           **************************************************************************************/
     22          
     23          #include "ctypes.h"
     24          #include "manager.h"
     25          #include "database.h"
     26          
     27          #ifdef __cplusplus 
     28              extern "C" {
     29          #endif
     30          
     31          int Place_Order(table_index_type Table,
     32                                 seat_index_type Seat,
     33                                 struct order_type Order);
     34          
     35          int Clear_Table(table_index_type Table);
     36          
     37          float Get_Check_Total(table_index_type Table);
     38          
     39          void Add_Included_Dessert(struct order_type* Order);
     40          int Pay_The_Bill(const char * name, const char cardNumber[16], const char secCode[3], int Table);
     41          
     42          #ifdef __cplusplus 
     43          }
     44          #endif
     45          
     46          
     47          /**************************************************************************************
     48           *  Subprogram: run_order_test                                                        *
     49           *                                                                                    * 
     50           *  Purpose: To drive the                                                             *
     51           *                                                                                    * 
     52           *  Inputs:                                                                           *
     53           *       - entree - Integer - Order Entree                                            *
     54           *       - value  - Integer - Value to verify                                         *
     55           *       - name   - Integer - Name to printout after the operation is complete        *
     56           *                                                                                    * 
     57           *  Outputs:                                                                          *
     58           *       - return (int): 0/-1: Success/Failure                                        *
     59           *                                                                                    * 
     60           **************************************************************************************/
     61          

   \                                 In section .text, align 2, keep-with-next
     62          static int run_order_test(enum entrees entree, int value, const char * name)
     63          {
   \                     run_order_test: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0xB082             SUB      SP,SP,#+8
   \        0x8   0x0004             MOVS     R4,R0
   \        0xA   0xEE08 0x1A10      VMOV     S16,R1
   \        0xE   0x0015             MOVS     R5,R2
     64              // Stores the order for input into the point of sales terminal
     65              struct order_type order;
     66              
     67              int ret_val = 0;
   \       0x10   0x2600             MOVS     R6,#+0
     68              
     69              // setup the order
     70              order.Entree = entree;
   \       0x12   0xF88D 0x4002      STRB     R4,[SP, #+2]
     71              
     72              // place the order
     73              Place_Order(1, 1, order);
   \       0x16   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x.... 0x....      BL       Place_Order
     74              
     75              // process the results
     76              if (Get_Check_Total(1) == value)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0x.... 0x....      BL       Get_Check_Total
   \       0x28   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \       0x2C   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \       0x30   0xEEF1 0xFA10      FMSTAT
   \       0x34   0xD104             BNE.N    ??run_order_test_0
     77              {
     78                  printf ("%s: PASSED\n", name);
   \       0x36   0x0029             MOVS     R1,R5
   \       0x38   0x....             LDR.N    R0,??DataTable1_10
   \       0x3A   0x.... 0x....      BL       printf
   \       0x3E   0xE005             B.N      ??run_order_test_1
     79              }
     80              else 
     81              {
     82                  printf ("%s: FAILED %d\n",name, --ret_val);
   \                     ??run_order_test_0: (+1)
   \       0x40   0x1E76             SUBS     R6,R6,#+1
   \       0x42   0x0032             MOVS     R2,R6
   \       0x44   0x0029             MOVS     R1,R5
   \       0x46   0x....             LDR.N    R0,??DataTable1_11
   \       0x48   0x.... 0x....      BL       printf
     83              }
     84              
     85              // send the return value
     86              return ret_val;
   \                     ??run_order_test_1: (+1)
   \       0x4C   0x0030             MOVS     R0,R6
   \       0x4E   0xB002             ADD      SP,SP,#+8
   \       0x50   0xECBD 0x8B02      VPOP     {D8}
   \       0x54   0xBD70             POP      {R4-R6,PC}
     87          }
     88          
     89          /**************************************************************************************
     90           *  Subprogram: Standard C main                                                       *
     91           *                                                                                    *
     92           *  Purpose: This is the main driver for the point of sales demo                      *
     93           *                                                                                    *
     94           *  Inputs:                                                                           *
     95           *       - argc - Integer - count of number of command line arguments                 *
     96           *       - argv - Character Array Pointer                                             *
     97           *                   Array of strings containing command line arguments.              *
     98           *                      From the command line arguments, main will take the           *
     99           *                      First character (upper/lower case) and use it as follows:     *
    100           *                         A: Add Free Dessert                                        *
    101           *                         C: Order Chicken                                           *
    102           *                         G: Get Check Total                                         *
    103           *                         L: Order Lobster                                           *
    104           *                         O: Check Occupied Status                                   *
    105           *                         P: Pay the Bill                                            *
    106           *                         S: Order Steak                                             *
    107           *                         T: Cleat the Table                                         *
    108           *                         _: Run a Sequence Test                                     *
    109           *                                                                                    *
    110           *  Outputs:                                                                          *
    111           *       - return (int): execution return value:                                      *
    112           *            - 0 : success                                                           *
    113           *            - Negative Number : Number of failures                                  *
    114           *                                                                                    *
    115           **************************************************************************************/
    116           

   \                                 In section .text, align 2, keep-with-next
    117          int main(int argc, const char *argv[])
    118          {
   \                     main: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB092             SUB      SP,SP,#+72
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
    119              const char cardnum[17] = "1234568711115508";
   \        0xA   0xA803             ADD      R0,SP,#+12
   \        0xC   0x....             LDR.N    R1,??DataTable1_12
   \        0xE   0x2211             MOVS     R2,#+17
   \       0x10   0x.... 0x....      BL       __aeabi_memcpy
    120              const char secCode[4] = "918";
   \       0x14   0xA802             ADD      R0,SP,#+8
   \       0x16   0x....             LDR.N    R1,??DataTable1_13
   \       0x18   0x680A             LDR      R2,[R1, #+0]
   \       0x1A   0x6002             STR      R2,[R0, #+0]
    121          
    122              // Stores the order for input into the point of sales terminal
    123              struct order_type order;
    124          
    125              // Stores return value
    126              int ret_val = 0;
   \       0x1C   0x2600             MOVS     R6,#+0
    127          
    128              // Counter for command line argument list
    129              int i = 1;
   \       0x1E   0x2701             MOVS     R7,#+1
    130              
    131              if (argc == 0) {
   \       0x20   0x2C00             CMP      R4,#+0
   \       0x22   0xD119             BNE.N    ??main_0
    132                argc = 10;
   \       0x24   0x200A             MOVS     R0,#+10
   \       0x26   0x0004             MOVS     R4,R0
    133                argv = malloc(10*sizeof(char *));
   \       0x28   0x2028             MOVS     R0,#+40
   \       0x2A   0x.... 0x....      BL       malloc
   \       0x2E   0x0005             MOVS     R5,R0
    134                argv[0] = "vcast";
   \       0x30   0x....             LDR.N    R0,??DataTable1_14
   \       0x32   0x6028             STR      R0,[R5, #+0]
    135                argv[1] = "P";
   \       0x34   0x....             ADR.N    R0,??DataTable1
   \       0x36   0x6068             STR      R0,[R5, #+4]
    136                argv[2] = "O";
   \       0x38   0x....             ADR.N    R0,??DataTable1_1
   \       0x3A   0x60A8             STR      R0,[R5, #+8]
    137                argv[3] = "S";
   \       0x3C   0x....             ADR.N    R0,??DataTable1_2
   \       0x3E   0x60E8             STR      R0,[R5, #+12]
    138                argv[4] = "T";
   \       0x40   0x....             ADR.N    R0,??DataTable1_3
   \       0x42   0x6128             STR      R0,[R5, #+16]
    139                argv[5] = "_";
   \       0x44   0x....             ADR.N    R0,??DataTable1_4
   \       0x46   0x6168             STR      R0,[R5, #+20]
    140                argv[6] = "C";
   \       0x48   0x....             ADR.N    R0,??DataTable1_5
   \       0x4A   0x61A8             STR      R0,[R5, #+24]
    141                argv[7] = "L";
   \       0x4C   0x....             ADR.N    R0,??DataTable1_6
   \       0x4E   0x61E8             STR      R0,[R5, #+28]
    142                argv[8] = "A";
   \       0x50   0x....             ADR.N    R0,??DataTable1_7
   \       0x52   0x6228             STR      R0,[R5, #+32]
    143                argv[9] = "G";
   \       0x54   0x....             ADR.N    R0,??DataTable1_8
   \       0x56   0x6268             STR      R0,[R5, #+36]
    144              }
    145          
    146              // Loop over the command line arguments
    147              while (i < argc)
   \                     ??main_0: (+1)
   \       0x58   0x42A7             CMP      R7,R4
   \       0x5A   0xF280 0x8115      BGE.W    ??main_1
    148              {
    149                  // determine which case needs to run
    150                  switch (argv[i++][0])
   \       0x5E   0x0038             MOVS     R0,R7
   \       0x60   0x1C47             ADDS     R7,R0,#+1
   \       0x62   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \       0x66   0x7800             LDRB     R0,[R0, #+0]
   \       0x68   0x2841             CMP      R0,#+65
   \       0x6A   0xF000 0x80A7      BEQ.W    ??main_2
   \       0x6E   0x2843             CMP      R0,#+67
   \       0x70   0xF000 0x80C6      BEQ.W    ??main_3
   \       0x74   0x2847             CMP      R0,#+71
   \       0x76   0xF000 0x80E6      BEQ.W    ??main_4
   \       0x7A   0x284C             CMP      R0,#+76
   \       0x7C   0xF000 0x80C8      BEQ.W    ??main_5
   \       0x80   0x284F             CMP      R0,#+79
   \       0x82   0xD022             BEQ.N    ??main_6
   \       0x84   0x2850             CMP      R0,#+80
   \       0x86   0xF000 0x80CB      BEQ.W    ??main_7
   \       0x8A   0x2853             CMP      R0,#+83
   \       0x8C   0xF000 0x80B0      BEQ.W    ??main_8
   \       0x90   0x2854             CMP      R0,#+84
   \       0x92   0xF000 0x80E3      BEQ.W    ??main_9
   \       0x96   0x285F             CMP      R0,#+95
   \       0x98   0xD032             BEQ.N    ??main_10
   \       0x9A   0x2861             CMP      R0,#+97
   \       0x9C   0xF000 0x808E      BEQ.W    ??main_2
   \       0xA0   0x2863             CMP      R0,#+99
   \       0xA2   0xF000 0x80AD      BEQ.W    ??main_3
   \       0xA6   0x2867             CMP      R0,#+103
   \       0xA8   0xF000 0x80CD      BEQ.W    ??main_4
   \       0xAC   0x286C             CMP      R0,#+108
   \       0xAE   0xF000 0x80AF      BEQ.W    ??main_5
   \       0xB2   0x286F             CMP      R0,#+111
   \       0xB4   0xD009             BEQ.N    ??main_6
   \       0xB6   0x2870             CMP      R0,#+112
   \       0xB8   0xF000 0x80B2      BEQ.W    ??main_7
   \       0xBC   0x2873             CMP      R0,#+115
   \       0xBE   0xF000 0x8097      BEQ.W    ??main_8
   \       0xC2   0x2874             CMP      R0,#+116
   \       0xC4   0xF000 0x80CA      BEQ.W    ??main_9
   \       0xC8   0xE077             B.N      ??main_11
    151                  {
    152                      // Check Occupied Table Status
    153                      case 'o': case 'O':
    154                          // Place an order
    155                          order.Entree = STEAK;
   \                     ??main_6: (+1)
   \       0xCA   0x2001             MOVS     R0,#+1
   \       0xCC   0xF88D 0x0002      STRB     R0,[SP, #+2]
    156                          Place_Order(1, 1, order);
   \       0xD0   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \       0xD4   0x2101             MOVS     R1,#+1
   \       0xD6   0x2001             MOVS     R0,#+1
   \       0xD8   0x.... 0x....      BL       Place_Order
    157                          
    158                          // check the status
    159                          if (Get_Record(1).Is_Occupied)
   \       0xDC   0x2101             MOVS     R1,#+1
   \       0xDE   0xA808             ADD      R0,SP,#+32
   \       0xE0   0x.... 0x....      BL       Get_Record
   \       0xE4   0xF89D 0x0020      LDRB     R0,[SP, #+32]
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xD003             BEQ.N    ??main_12
    160                          {
    161                              printf ("Occupied Status: PASSED\n");
   \       0xEC   0x....             LDR.N    R0,??DataTable1_15
   \       0xEE   0x.... 0x....      BL       printf
   \       0xF2   0xE004             B.N      ??main_13
    162                          }
    163                          else
    164                          {
    165                              printf ("Occupied Status: FAILED %d\n", --ret_val);
   \                     ??main_12: (+1)
   \       0xF4   0x1E76             SUBS     R6,R6,#+1
   \       0xF6   0x0031             MOVS     R1,R6
   \       0xF8   0x....             LDR.N    R0,??DataTable1_16
   \       0xFA   0x.... 0x....      BL       printf
    166                          }
    167                          break;
   \                     ??main_13: (+1)
   \       0xFE   0xE7AB             B.N      ??main_0
    168                          
    169                      // _Sequence Test
    170                      case '_':
    171                          // Steak Order
    172                          ret_val += run_order_test(STEAK,14,"Ordered Steak");
   \                     ??main_10: (+1)
   \      0x100   0x....             LDR.N    R2,??DataTable1_17
   \      0x102   0x210E             MOVS     R1,#+14
   \      0x104   0x2001             MOVS     R0,#+1
   \      0x106   0x.... 0x....      BL       run_order_test
   \      0x10A   0x4680             MOV      R8,R0
   \      0x10C   0xEB18 0x0806      ADDS     R8,R8,R6
    173                          
    174                          // Chicken Order
    175                          ret_val += run_order_test(CHICKEN,24,"Ordered Chicken");
   \      0x110   0x....             LDR.N    R2,??DataTable1_18
   \      0x112   0x2118             MOVS     R1,#+24
   \      0x114   0x2002             MOVS     R0,#+2
   \      0x116   0x.... 0x....      BL       run_order_test
   \      0x11A   0x4681             MOV      R9,R0
   \      0x11C   0xEB19 0x0908      ADDS     R9,R9,R8
    176                          
    177                          // Lobster Order
    178                          ret_val += run_order_test(LOBSTER,42,"Ordered Lobster");
   \      0x120   0x....             LDR.N    R2,??DataTable1_19
   \      0x122   0x212A             MOVS     R1,#+42
   \      0x124   0x2003             MOVS     R0,#+3
   \      0x126   0x.... 0x....      BL       run_order_test
   \      0x12A   0xEB10 0x0009      ADDS     R0,R0,R9
   \      0x12E   0x0006             MOVS     R6,R0
    179                          
    180                          // Pay the bill
    181                          if (Pay_The_Bill("Tim Schneider", "4568772911000937","919",1) == -1)
   \      0x130   0x2301             MOVS     R3,#+1
   \      0x132   0x....             ADR.N    R2,??DataTable1_9
   \      0x134   0x....             LDR.N    R1,??DataTable1_20
   \      0x136   0x....             LDR.N    R0,??DataTable1_21
   \      0x138   0x.... 0x....      BL       Pay_The_Bill
   \      0x13C   0xF110 0x0F01      CMN      R0,#+1
   \      0x140   0xD105             BNE.N    ??main_14
    182                          {
    183                              printf ("PayBill: FAILED %d\n", --ret_val);
   \      0x142   0x1E76             SUBS     R6,R6,#+1
   \      0x144   0x0031             MOVS     R1,R6
   \      0x146   0x....             LDR.N    R0,??DataTable1_22
   \      0x148   0x.... 0x....      BL       printf
   \      0x14C   0xE002             B.N      ??main_15
    184                          }
    185                          else
    186                          {
    187                              printf ("PayBill: PASSED\n");
   \                     ??main_14: (+1)
   \      0x14E   0x....             LDR.N    R0,??DataTable1_23
   \      0x150   0x.... 0x....      BL       printf
    188                          }
    189                          
    190                          // Get check and clear table
    191                          printf("The Total is %d\n", (int)Get_Check_Total(1));
   \                     ??main_15: (+1)
   \      0x154   0x2001             MOVS     R0,#+1
   \      0x156   0x.... 0x....      BL       Get_Check_Total
   \      0x15A   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \      0x15E   0xEE10 0x1A10      VMOV     R1,S0
   \      0x162   0x....             LDR.N    R0,??DataTable1_24
   \      0x164   0x.... 0x....      BL       printf
    192                          
    193                          // Clear the table
    194                          if (Clear_Table(1) == -1)
   \      0x168   0x2001             MOVS     R0,#+1
   \      0x16A   0x.... 0x....      BL       Clear_Table
   \      0x16E   0xF110 0x0F01      CMN      R0,#+1
   \      0x172   0xD105             BNE.N    ??main_16
    195                          {
    196                              printf ("Clear_Table: FAILED %d\n", --ret_val);
   \      0x174   0x1E76             SUBS     R6,R6,#+1
   \      0x176   0x0031             MOVS     R1,R6
   \      0x178   0x....             LDR.N    R0,??DataTable1_25
   \      0x17A   0x.... 0x....      BL       printf
   \      0x17E   0xE002             B.N      ??main_17
    197                          }
    198                          else
    199                          {
    200                              printf ("Clear_Table: PASSED\n");
   \                     ??main_16: (+1)
   \      0x180   0x....             LDR.N    R0,??DataTable1_26
   \      0x182   0x.... 0x....      BL       printf
    201                          }
    202                          
    203                          // Setup the order for free dessert
    204                          order.Entree = STEAK;
   \                     ??main_17: (+1)
   \      0x186   0x2001             MOVS     R0,#+1
   \      0x188   0xF88D 0x0002      STRB     R0,[SP, #+2]
    205                          order.Salad = CAESAR;
   \      0x18C   0x2001             MOVS     R0,#+1
   \      0x18E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    206                          order.Beverage = MIXED_DRINK;
   \      0x192   0x2003             MOVS     R0,#+3
   \      0x194   0xF88D 0x0004      STRB     R0,[SP, #+4]
    207                          
    208                          // run the function that adds the dessert
    209                          Add_Included_Dessert(&order);
   \      0x198   0x4668             MOV      R0,SP
   \      0x19A   0x.... 0x....      BL       Add_Included_Dessert
    210                          
    211                          // check the status
    212                          if (order.Dessert == PIE)
   \      0x19E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \      0x1A2   0x2802             CMP      R0,#+2
   \      0x1A4   0xD103             BNE.N    ??main_18
    213                          {
    214                              printf ("Add Dessert: PASSED\n");
   \      0x1A6   0x....             LDR.N    R0,??DataTable1_27
   \      0x1A8   0x.... 0x....      BL       printf
   \      0x1AC   0xE004             B.N      ??main_19
    215                          }
    216                          else
    217                          {
    218                              printf ("Add Dessert: FAILED %d\n", --ret_val);
   \                     ??main_18: (+1)
   \      0x1AE   0x1E76             SUBS     R6,R6,#+1
   \      0x1B0   0x0031             MOVS     R1,R6
   \      0x1B2   0x....             LDR.N    R0,??DataTable1_28
   \      0x1B4   0x.... 0x....      BL       printf
    219                          }
    220                          break;
   \                     ??main_19: (+1)
   \      0x1B8   0xE74E             B.N      ??main_0
    221                      default: break;
   \                     ??main_11: (+1)
   \      0x1BA   0xE74D             B.N      ??main_0
    222                     
    223                      // Add Free Dessert
    224                      case 'a': case 'A':
    225                          order.Entree = STEAK;
   \                     ??main_2: (+1)
   \      0x1BC   0x2001             MOVS     R0,#+1
   \      0x1BE   0xF88D 0x0002      STRB     R0,[SP, #+2]
    226                          order.Salad = CAESAR;
   \      0x1C2   0x2001             MOVS     R0,#+1
   \      0x1C4   0xF88D 0x0001      STRB     R0,[SP, #+1]
    227                          order.Beverage = MIXED_DRINK;
   \      0x1C8   0x2003             MOVS     R0,#+3
   \      0x1CA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    228                          Add_Included_Dessert(&order);
   \      0x1CE   0x4668             MOV      R0,SP
   \      0x1D0   0x.... 0x....      BL       Add_Included_Dessert
    229                          if (order.Dessert == PIE)
   \      0x1D4   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \      0x1D8   0x2802             CMP      R0,#+2
   \      0x1DA   0xD103             BNE.N    ??main_20
    230                          {
    231                              printf ("Add Dessert: PASSED\n");
   \      0x1DC   0x....             LDR.N    R0,??DataTable1_27
   \      0x1DE   0x.... 0x....      BL       printf
   \      0x1E2   0xE004             B.N      ??main_21
    232                          }
    233                          else
    234                          {
    235                              printf ("Add Dessert: FAILED %d\n", --ret_val);
   \                     ??main_20: (+1)
   \      0x1E4   0x1E76             SUBS     R6,R6,#+1
   \      0x1E6   0x0031             MOVS     R1,R6
   \      0x1E8   0x....             LDR.N    R0,??DataTable1_28
   \      0x1EA   0x.... 0x....      BL       printf
    236                          }
    237                          break;
   \                     ??main_21: (+1)
   \      0x1EE   0xE733             B.N      ??main_0
    238          
    239                      // Steak Case
    240                      case 'S': case 's':
    241                          ret_val += run_order_test(STEAK,14,"Ordered Steak");
   \                     ??main_8: (+1)
   \      0x1F0   0x....             LDR.N    R2,??DataTable1_17
   \      0x1F2   0x210E             MOVS     R1,#+14
   \      0x1F4   0x2001             MOVS     R0,#+1
   \      0x1F6   0x.... 0x....      BL       run_order_test
   \      0x1FA   0x1980             ADDS     R0,R0,R6
   \      0x1FC   0x0006             MOVS     R6,R0
    242                          break;
   \      0x1FE   0xE72B             B.N      ??main_0
    243                          
    244                      // Chicken Case
    245                      case 'C': case 'c':
    246                          ret_val += run_order_test(CHICKEN,10,"Ordered Chicken");
   \                     ??main_3: (+1)
   \      0x200   0x....             LDR.N    R2,??DataTable1_18
   \      0x202   0x210A             MOVS     R1,#+10
   \      0x204   0x2002             MOVS     R0,#+2
   \      0x206   0x.... 0x....      BL       run_order_test
   \      0x20A   0x1980             ADDS     R0,R0,R6
   \      0x20C   0x0006             MOVS     R6,R0
    247                          break;
   \      0x20E   0xE723             B.N      ??main_0
    248                          
    249                      // Lobster Case
    250                      case 'L': case 'l':
    251                          ret_val += run_order_test(LOBSTER,18,"Ordered Lobster");
   \                     ??main_5: (+1)
   \      0x210   0x....             LDR.N    R2,??DataTable1_19
   \      0x212   0x2112             MOVS     R1,#+18
   \      0x214   0x2003             MOVS     R0,#+3
   \      0x216   0x.... 0x....      BL       run_order_test
   \      0x21A   0x1980             ADDS     R0,R0,R6
   \      0x21C   0x0006             MOVS     R6,R0
    252                          break;
   \      0x21E   0xE71B             B.N      ??main_0
    253                          
    254                      // Pay the bill
    255                      case 'p': case 'P':
    256                          if (Pay_The_Bill("Tim Schneider", "4568772911000937","919",1) == -1)
   \                     ??main_7: (+1)
   \      0x220   0x2301             MOVS     R3,#+1
   \      0x222   0x....             ADR.N    R2,??DataTable1_9
   \      0x224   0x....             LDR.N    R1,??DataTable1_20
   \      0x226   0x....             LDR.N    R0,??DataTable1_21
   \      0x228   0x.... 0x....      BL       Pay_The_Bill
   \      0x22C   0xF110 0x0F01      CMN      R0,#+1
   \      0x230   0xD105             BNE.N    ??main_22
    257                          {
    258                              printf ("PayBill: FAILED %d\n", --ret_val);
   \      0x232   0x1E76             SUBS     R6,R6,#+1
   \      0x234   0x0031             MOVS     R1,R6
   \      0x236   0x....             LDR.N    R0,??DataTable1_22
   \      0x238   0x.... 0x....      BL       printf
   \      0x23C   0xE002             B.N      ??main_23
    259                          }
    260                          else
    261                          {
    262                              printf ("PayBill: PASSED\n");
   \                     ??main_22: (+1)
   \      0x23E   0x....             LDR.N    R0,??DataTable1_23
   \      0x240   0x.... 0x....      BL       printf
    263                          }
    264                          break;
   \                     ??main_23: (+1)
   \      0x244   0xE708             B.N      ??main_0
    265                          
    266                      // Get the check total
    267                      case 'g': case 'G':
    268                          printf("The Total is %d\n", (int)Get_Check_Total(1));
   \                     ??main_4: (+1)
   \      0x246   0x2001             MOVS     R0,#+1
   \      0x248   0x.... 0x....      BL       Get_Check_Total
   \      0x24C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \      0x250   0xEE10 0x1A10      VMOV     R1,S0
   \      0x254   0x....             LDR.N    R0,??DataTable1_24
   \      0x256   0x.... 0x....      BL       printf
    269                          break;
   \      0x25A   0xE6FD             B.N      ??main_0
    270                          
    271                      // Clear the table    
    272                      case 'T': 
    273                      case 't':
    274          
    275                          Pay_The_Bill("NoOne", cardnum,secCode,1);
   \                     ??main_9: (+1)
   \      0x25C   0x2301             MOVS     R3,#+1
   \      0x25E   0xAA02             ADD      R2,SP,#+8
   \      0x260   0xA903             ADD      R1,SP,#+12
   \      0x262   0x....             LDR.N    R0,??DataTable1_29
   \      0x264   0x.... 0x....      BL       Pay_The_Bill
    276                          if (Clear_Table(1) == -1)
   \      0x268   0x2001             MOVS     R0,#+1
   \      0x26A   0x.... 0x....      BL       Clear_Table
   \      0x26E   0xF110 0x0F01      CMN      R0,#+1
   \      0x272   0xD105             BNE.N    ??main_24
    277                          {
    278                              printf ("Clear_Table: FAILED %d\n", --ret_val);
   \      0x274   0x1E76             SUBS     R6,R6,#+1
   \      0x276   0x0031             MOVS     R1,R6
   \      0x278   0x....             LDR.N    R0,??DataTable1_25
   \      0x27A   0x.... 0x....      BL       printf
   \      0x27E   0xE002             B.N      ??main_25
    279                          }
    280                          else
    281                          {
    282                              printf ("Clear_Table: PASSED\n");
   \                     ??main_24: (+1)
   \      0x280   0x....             LDR.N    R0,??DataTable1_26
   \      0x282   0x.... 0x....      BL       printf
    283                          }
    284                          break;
   \                     ??main_25: (+1)
   \      0x286   0xE6E7             B.N      ??main_0
    285                  }
    286              }
    287          
    288            // return the number of failures
    289            return ret_val;
   \                     ??main_1: (+1)
   \      0x288   0x0030             MOVS     R0,R6
   \      0x28A   0xB013             ADD      SP,SP,#+76
   \      0x28C   0xE8BD 0x83F0      POP      {R4-R9,PC}
    290          }

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x31 0x32          DC8 "1234568711115508"
   \              0x33 0x34    
   \              0x35 0x36    
   \              0x38 0x37    
   \              0x31 0x31    
   \              0x31 0x31    
   \              0x35 0x35    
   \              0x30 0x38    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x39 0x31          DC8 "918"
   \              0x38 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x50 0x00          DC8      "P",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4F 0x00          DC8      "O",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x53 0x00          DC8      "S",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x54 0x00          DC8      "T",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x5F 0x00          DC8      "_",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x43 0x00          DC8      "C",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x4C 0x00          DC8      "L",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x41 0x00          DC8      "A",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x47 0x00          DC8      "G",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x39 0x31          DC8      "919"          
   \              0x39 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \        0x0   0x....'....        DC32     ?_27

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x73          DC8 "%s: PASSED\012"
   \              0x3A 0x20    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x45 0x44    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x25 0x73          DC8 "%s: FAILED %d\012"
   \              0x3A 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x76 0x63          DC8 "vcast"
   \              0x61 0x73    
   \              0x74 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 2
   \        0x0   0x50 0x00          DC8 "P"

   \                                 In section .rodata, align 2
   \        0x0   0x4F 0x00          DC8 "O"

   \                                 In section .rodata, align 2
   \        0x0   0x53 0x00          DC8 "S"

   \                                 In section .rodata, align 2
   \        0x0   0x54 0x00          DC8 "T"

   \                                 In section .rodata, align 2
   \        0x0   0x5F 0x00          DC8 "_"

   \                                 In section .rodata, align 2
   \        0x0   0x43 0x00          DC8 "C"

   \                                 In section .rodata, align 2
   \        0x0   0x4C 0x00          DC8 "L"

   \                                 In section .rodata, align 2
   \        0x0   0x41 0x00          DC8 "A"

   \                                 In section .rodata, align 2
   \        0x0   0x47 0x00          DC8 "G"

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x4F 0x63          DC8 "Occupied Status: PASSED\012"
   \              0x63 0x75    
   \              0x70 0x69    
   \              0x65 0x64    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x50    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x44 0x0A    
   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x4F 0x63          DC8 "Occupied Status: FAILED %d\012"
   \              0x63 0x75    
   \              0x70 0x69    
   \              0x65 0x64    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x4F 0x72          DC8 "Ordered Steak"
   \              0x64 0x65    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x53 0x74    
   \              0x65 0x61    
   \              0x6B 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x4F 0x72          DC8 "Ordered Chicken"
   \              0x64 0x65    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x43 0x68    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x6E 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x4F 0x72          DC8 "Ordered Lobster"
   \              0x64 0x65    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x4C 0x6F    
   \              0x62 0x73    
   \              0x74 0x65    
   \              0x72 0x00

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x54 0x69          DC8 "Tim Schneider"
   \              0x6D 0x20    
   \              0x53 0x63    
   \              0x68 0x6E    
   \              0x65 0x69    
   \              0x64 0x65    
   \              0x72 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x34 0x35          DC8 "4568772911000937"
   \              0x36 0x38    
   \              0x37 0x37    
   \              0x32 0x39    
   \              0x31 0x31    
   \              0x30 0x30    
   \              0x30 0x39    
   \              0x33 0x37    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \        0x0   0x39 0x31          DC8 "919"
   \              0x39 0x00

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x50 0x61          DC8 "PayBill: FAILED %d\012"
   \              0x79 0x42    
   \              0x69 0x6C    
   \              0x6C 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x50 0x61          DC8 "PayBill: PASSED\012"
   \              0x79 0x42    
   \              0x69 0x6C    
   \              0x6C 0x3A    
   \              0x20 0x50    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x44 0x0A    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x54 0x68          DC8 "The Total is %d\012"
   \              0x65 0x20    
   \              0x54 0x6F    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x69 0x73    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x43 0x6C          DC8 "Clear_Table: FAILED %d\012"
   \              0x65 0x61    
   \              0x72 0x5F    
   \              0x54 0x61    
   \              0x62 0x6C    
   \              0x65 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x43 0x6C          DC8 "Clear_Table: PASSED\012"
   \              0x65 0x61    
   \              0x72 0x5F    
   \              0x54 0x61    
   \              0x62 0x6C    
   \              0x65 0x3A    
   \              0x20 0x50    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x44 0x0A    
   \              0x00
   \       0x15                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x41 0x64          DC8 "Add Dessert: PASSED\012"
   \              0x64 0x20    
   \              0x44 0x65    
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x74 0x3A    
   \              0x20 0x50    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x44 0x0A    
   \              0x00
   \       0x15                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x41 0x64          DC8 "Add Dessert: FAILED %d\012"
   \              0x64 0x20    
   \              0x44 0x65    
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x74 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x4E 0x6F          DC8 "NoOne"
   \              0x4F 0x6E    
   \              0x65 0x00
   \        0x6                      DS8 2

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     104   main
       104   -> Add_Included_Dessert
       104   -> Clear_Table
       104   -> Get_Check_Total
       104   -> Get_Record
       104   -> Pay_The_Bill
       104   -> Place_Order
       104   -> __aeabi_memcpy
       104   -> malloc
       104   -> printf
       104   -> run_order_test
      32   run_order_test
        32   -> Get_Check_Total
        32   -> Place_Order
        32   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      12  ?_0
      16  ?_1
       2  ?_10
       2  ?_11
      28  ?_12
      28  ?_13
      16  ?_14
      16  ?_15
      16  ?_16
      16  ?_17
      20  ?_18
       4  ?_19
       8  ?_2
      20  ?_20
      20  ?_21
      20  ?_22
      24  ?_23
      24  ?_24
      24  ?_25
      24  ?_26
       8  ?_27
      20  ?_28
       4  ?_29
       2  ?_3
       2  ?_4
       2  ?_5
       2  ?_6
       2  ?_7
       2  ?_8
       2  ?_9
     656  main
      86  run_order_test

 
 386 bytes in section .rodata
 862 bytes in section .text
 
 862 bytes of CODE  memory
 386 bytes of CONST memory

Errors: none
Warnings: none
